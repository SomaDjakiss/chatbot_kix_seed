import os
import re
import streamlit as st
from collections import defaultdict
from itertools import islice
from langchain.prompts.chat import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langchain.chat_models import ChatOpenAI
from proccessing import get_df_merge_final

st.set_page_config(page_title="üéì Analyse Scolaire", layout="centered")
st.title("üéì Chatbot Scolaire - Analyse des Performances")

# ‚úÖ Chargement et cache des donn√©es
@st.cache_data(ttl=3600)
def load_data():
    return get_df_merge_final()

df = load_data()

# ‚úÖ Chargement de la cl√© API OpenAI depuis les secrets Streamlit
openai_api_key = st.secrets["OPENAI_API_KEY"]

# ‚úÖ Configuration du mod√®le GPT
llm = ChatOpenAI(
    model_name="gpt-4",
    temperature=0.7,
    openai_api_key=openai_api_key
)

# Prompt template
prompt_template = ChatPromptTemplate(
    input_variables=["question", "donnees"],
    template="""
Tu es un expert en analyse p√©dagogique,  con√ßue pour fournir des r√©ponses pr√©cises, structur√©es et bas√©es sur des donn√©es scolaires.

Voici des donn√©es sur les performances scolaires d'√©l√®ves d'une m√™me classe. Chaque bloc correspond √† un √©l√®ve.

Ta t√¢che est :
### question concernant un √©l√®ve :
**Pour un √©l√®ve sp√©cifique** (par nom ou ID) :
- Fournis ses notes (notes_matieres, moyenne_t1, moyenne_t2, moyenne_t3), son rang (rang_t1, rang_t2, rang_t3), et ses absences (type_presence, motif_absence).
- Analyse ses forces (mati√®res avec hautes notes) et faiblesses (mati√®res avec basses notes).
- Identifie les tendances (ex. mati√®res difficiles, √©l√®ves performants,√©l√®ve moyen, √©l√®ve faible).
- Analyse ses r√©sultats globaux et par mati√®re.
- Compare sa performance √† celle de sa classe.
- Rep√®re ses points forts et ses difficult√©s.
- Fournis des suggestion et des conseils personnalis√©s pour son am√©lioration 

### question concernant un classe:
- donn√© la moyenne g√©n√©rale de la classe.
** identifie:
- Le meilleur et le plus faible √©l√®ve selon la moyenne g√©n√©rale par trimestre, aussi la moyenne de la classe en se basant sur cette colonne (moyenne_classe_t1, moyenne_classe_t2, moyenne_classe_t3)
- Utilise les statistiques pour les moyennes, maximums et effectifs pour une classe dans la colonne nom_salle_classe(CP1,CP2,CE1,CE2,CM1 et CM2) dans une √©cole donn√©es
- Identifie les tendances (ex. mati√®res difficiles, √©l√®ves performants,√©l√®ve moyen, √©l√®ve faible).
- Rep√©rer les mati√®res les mieux et moins bien r√©ussies
- Indiquer s'il existe des cas exceptionnels (tr√®s bons ou tr√®s faibles)
- Faire une analyse de trois √©l√®ves dans la classe et l'√©cole donn√©e
- Donne un aper√ßu des √©carts de performance.
- Propose des suggestions et des pistes p√©dagogiques concr√®tes pour renforcer les acquis ou combler les lacunes.

### question concernan une √©cole:
**Dresse un bilan *par classe* :
- Moyenne g√©n√©rale de chaque classe.
- √âl√®ves les plus forts et les plus faibles.
- Mati√®res les plus r√©ussies / √©chou√©es.
** Int√®gre aussi :
-  Les cas de *violence ou de victimisation* s'ils sont signal√©s.
- Les caract√©ristiques sp√©cifiques de l'√©cole (environnement, effectif, encadrement, etc.).
- Sugg√®re des recommandations r√©alistes pour am√©liorer la qualit√© de l'enseignement dans l'√©tablissement.

###Si la question concerne une CEB ou une commune
**Pr√©sente une *analyse comparative entre √©coles* :
- Performances globales (par classe et par √©cole).
- Classement ou hi√©rarchisation des √©coles si pertinent.
- Forces et faiblesses communes ou sp√©cifiques.
- Signalement des situations probl√©matiques (violences, in√©galit√©s, d√©s√©quilibres).
- Propose des recommandations *√† l'√©chelle territoriale* (CEB ou commune) pour renforcer l'apprentissage et r√©duire les disparit√©s.

###Objectif final 
**Fournir une *analyse claire, structur√©e et compr√©hensible*, avec :
- Des *constats bas√©s sur les donn√©es*.
- Des *conclusions p√©dagogiques* pertinentes.
- Des *recommandations pratiques* pour am√©liorer les performances √† tous les niveaux analys√©s.

**Ne jamais inventer de donn√©es**. Si les donn√©es sont manquantes, indique-le clairement.


Question : {question}

Donn√©es :
{donnees}

Fais une r√©ponse claire et structur√©e.
"""
)

def extraire_filtre(question, valeurs_connues):
    for val in valeurs_connues:
        if val and str(val).lower() in question.lower():
            return val
    return None

def get_response_from_dataframe(question, df, nb_eleves=3):
    reponses = []

    # Normaliser les colonnes pour les correspondances
    question_lower = question.lower()

    # Recherche des filtres possibles
    id_eleve = extraire_filtre(question_lower, df['id_eleve'].astype(str).unique())
    identifiant_unique = extraire_filtre(question_lower, df['identifiant_unique_eleve'].astype(str).unique())
    id_classe = extraire_filtre(question_lower, df['id_classe'].astype(str).unique())
    code_classe = extraire_filtre(question_lower, df['code_classe'].astype(str).unique())
    nom_classe = extraire_filtre(question_lower, df['nom_classe'].astype(str).unique())
    nom_ecole = extraire_filtre(question_lower, df['nom_ecole'].astype(str).unique())
    code_ecole = extraire_filtre(question_lower, df['code_ecole'].astype(str).unique())
    ceb = extraire_filtre(question_lower, df['ceb_ecole'].astype(str).unique())
    commune = extraire_filtre(question_lower, df['commune_ecole'].astype(str).unique())
    ecole_id = extraire_filtre(question_lower, df['ecole_id'].astype(str).unique())

    # üîç Si recherche par √©l√®ve
    if id_eleve or identifiant_unique:
        ident = id_eleve or identifiant_unique
        ligne = df[(df['id_eleve'].astype(str) == ident) | (df['identifiant_unique_eleve'].astype(str) == ident)]
        if not ligne.empty:
            ligne = ligne.iloc[0]
            donnees_texte = "\n".join([f"{col} : {ligne[col]}" for col in df.columns if col in ligne])
            prompt = prompt_template.format(question=question, donnees=donnees_texte)
            resultat = llm.invoke(prompt)
            if hasattr(resultat, 'content'):
                resultat = resultat.content
            return resultat

    # üîç Sinon : filtrage par classe et √©cole
    filtres = []
    if nom_ecole: filtres.append(df['nom_ecole'].str.lower() == nom_ecole.lower())
    if code_ecole: filtres.append(df['code_ecole'].astype(str) == str(code_ecole))
    #if ceb: filtres.append(df['ceb_ecole'].str.lower() == ceb.lower())
    if ceb: filtres.append(df['ceb_ecole'].astype(str) == str(ceb))
    #if commune: filtres.append(df['commune_ecole'].str.lower() == commune.lower())
    if commune: filtres.append(df['commune_ecole'].astype(str) == str(commune))
    if code_classe: filtres.append(df['code_classe'].astype(str) == str(code_classe))
    if nom_classe: filtres.append(df['nom_classe'].str.lower() == nom_classe.lower())
    if id_classe: filtres.append(df['id_classe'].astype(str) == str(id_classe))
    if ecole_id: filtres.append(df['ecole_id'].astype(str) == str(ecole_id))

    if filtres:
        from functools import reduce
        import operator
        condition = reduce(operator.and_, filtres)
        df_filtre = df[condition]
        if df_filtre.empty:
            return "Aucune donn√©e trouv√©e avec les crit√®res sp√©cifi√©s."

        # Limiter le nombre d'√©l√®ves analys√©s
        df_limite = df_filtre.head(nb_eleves)
        for _, ligne in df_limite.iterrows():
            donnees_texte = "\n".join([f"{col} : {ligne[col]}" for col in df.columns if col in ligne])
            prompt = prompt_template.format(question=question, donnees=donnees_texte)
            resultat = llm.invoke(prompt)
            if hasattr(resultat, 'content'):
                resultat = resultat.content
            reponses.append(str(resultat))
        return "\n\n---\n\n".join(reponses)

    return "Aucun filtre d√©tect√© dans la question. Veuillez sp√©cifier un √©l√®ve, une classe ou une √©cole."

# Interface Streamlit
#st.set_page_config(page_title="üéì Analyse Scolaire", layout="centered")
#st.title("üéì Chatbot Scolaire - Analyse des Performances")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

#  Formulaire avec champ texte et bouton Submit
with st.form("formulaire_question"):
    user_input = st.text_input("Pose ta question sur un √©l√®ve, une √©cole ou une classe")
    submitted = st.form_submit_button("Submit")

#  Traitement apr√®s envoi
if submitted and user_input:
    response = get_response_from_dataframe(user_input, df)
    st.session_state.chat_history.extend([
        {"role": "user", "content": user_input},
        {"role": "assistant", "content": response}
    ])

# Affichage de l‚Äôhistorique
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])